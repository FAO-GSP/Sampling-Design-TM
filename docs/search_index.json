[["index.html", "Technical Manual Licence", " Soil Sampling Design Technical Manual Rodríguez Lado, L., Angelini, M.E, Naypewe, N., Luotto, I., Yigini, Y. 2023-12-05 Licence This Technical Manual is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. CC BY-NC-SA 4.0 LEGAL CODE. "],["abbreviations-and-acronyms.html", "Abbreviations and acronyms", " Abbreviations and acronyms CRAN Comprehensive R archive network DSM Digital soil mapping GEE Google Earth Engine GIS Geographic Information Systems GSP Global Soil Partnership INSII International Network of Soil Information Institutions ITPS Intergovernmental Technical Panel on Soils "],["introduction.html", "Chapter 1 Introduction Conditioned Latin Hypercube Sampling (cLHS)", " Chapter 1 Introduction Data can be found at the repository. A sample script is located at https://bitbucket.org/brendo1001/clhc_sampling/ Conditioned Latin Hypercube Sampling (cLHS) Conditioned Latin Hypercube Sampling (cLHS) is an advanced statistical method used for sampling multidimensional data developed within the context of digital Soil Mapping. It’s an extension of the basic Latin Hypercube Sampling (LHS) technique, a statistical method for generating a distribution of samples of a random variable. The main advantage of LHS over simple random sampling is its ability to ensure that the entire range of the auxiliary variables are explored. It divides the range of each variable into intervals of equal probability and samples each interval. The term “conditioned” refers to the way the sampling is adapted or conditioned based on specific requirements or constraints. It often involves conditioning the sampling process on one or more additional variables or criteria. This helps in generating samples that are not just representative in terms of the range of values, but also in terms of their relationships or distributions. cLHS is particularly useful for sampling from multivariate data, where there are multiple interrelated variables as it occurs in soil surveys. The main advantage of cLHS is its efficiency in sampling and its ability to better capture the structure and relationships within the data, compared to simpler sampling methods, and ensures that the samples are representative not just of the range of each variable, but also of their interrelations. Detailed information on cLHS can be found in (Minasny and Mcbratney, 2006) cHLS is also used to determine the optimal number of samples that cover the entire auxiliary data variability. References "],["legacy_data.html", "Chapter 2 Evaluating Soil Legacy Data Sampling for DSM 2.1 Data Preparation 2.2 Representativeness of the Legacy Soil Data", " Chapter 2 Evaluating Soil Legacy Data Sampling for DSM Modelling techniques in Digital Soil Mapping involve the use of sampling point soil data, with its associated soil properties database, and a number of environmental covariates that will be used to ascertain the relationships of soil properties and the environment to then generalize the findings to locations where no samples have been compiled. In soil sampling design, a crucial issue is to determine both the locations and the number of the samples to be compiled. In an optimal situation, soil sample database should adequately cover all the environmental diversity space in the study area with a frequency relative to the extent of the diversity in the environmental covariates. When dealing with legacy soil data, a question that arises is if the data is representative of the environmental diversity within the study area. In this Chapter we present a method to answer this question and to build an alternative how many samples can be retrieved to cover the same environmental space as the existing soil data. The method follows the main findings in (Malone, Minansy and Brungard, 2019) and developed as R scripts. We adapted the original scripts to make use of vector '.shp' and raster '.tif' files, as these are data formats commonly used by GIS analysts and in which both soil and environmental data is often stored. We also made some changes in order to simplify the number of R packages and to avoid the use of deprecated packages as it appears in the original code. 2.1 Data Preparation We must first load the required packages and data for the analyses. We make use of the packages sp and terra to manipulate spatial data, clhs for Conditioned Latin Hypercube Sampling, entropy to compute Kullback-Leibler (KL) divergence indexes, tripack for Delaunay triangulation and manipulate for interactive plotting within RStudio. Ensure that all these packages are installed in your system before the execution of the script. In this manual we recommend to use a common structure for the project, where R scripts appear in the root of the working directory and data files are in a data/ directory within the root directory (shp and tif files should be within the sub folders data/shapes and data/rasters respectively. Following this recommendation simplifies the definition of paths and execution of the scripts. If users want to change their storage paths they have to be properly adjusted in the script. We define the working directory to the directory in which the actual file is located and load the soil legacy sampling points and the environmental rasters from the data folder. To avoid the definition of each environmental covariate, we first retrieve all files with the .tif extension and then create a SpatRaster object with all of them in a row. # Set working directory to source file location setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) ## Load soil legacy point data p.dat &lt;- terra::vect(&quot;data/shapes/legacy_soils.shp&quot;) ## Load raster covariate data---- # Read Spatial data covariates as rasters with terra rasters &lt;- &quot;data/rasters&quot; cov.dat &lt;- list.files(rasters, pattern = &quot;tif$&quot;, recursive = TRUE, full.names = TRUE) cov.dat &lt;- terra::rast(cov.dat) # Plot covariates plot(cov.dat) (#fig:fig-load_data)Plot of the covariates 2.2 Representativeness of the Legacy Soil Data The next step involves the determination of the distributions of environmental values in the soil samples data and its comparison with the existing distributions of each environmental variable to determine the representativeness of the soil points in the environmental space. The comparison of distributions is performed through the Kullback-Leibler divergence (KL). It is a measure used to quantify the difference between two probability distributions. KL-divergence compares an ‘objective’ or reference probability distribution (here, the distribution of covariates in the complete covariate space - P) with a ‘model’ or approximate probability distribution (the space of covariates in the soil samples - Q). The main idea is to determine how much information is lost when Q is used to approximate P. In other words, KL-divergence measures how much the Q distribution deviates from the P distribution. We cross soil and environmental data to create a dataset with the values of the environmental parameters at the locations of the soil samples. # Extract environmental data from rasters at soil locations ---- p.dat_I &lt;- terra::extract(cov.dat, p.dat) p.dat_I &lt;- na.omit(p.dat_I) # Remove soil points outside study area str(p.dat_I) ## &#39;data.frame&#39;: 238 obs. of 5 variables: ## $ ID : num 1 2 3 4 5 6 7 8 9 10 ... ## $ ECd : num 7.48 5.86 7.4 6.84 6.2 ... ## $ ECs : num 7.86 5.67 7.81 6.99 5.51 ... ## $ elevation: num 127 127 127 127 127 ... ## $ yield : num 3.03 3.79 3.37 2.62 3.69 ... We first calculate a 'n-matrix' with the values of the covariates dividing their distributions into 'n' equally-spaced bins. Each bin captures the environmental variability within its interval in the total distribution. In this exercise, 'n' equals to 25. The result is a 26×4 matrix, where the rows represent the upper and lower limit of the bin and (thus, 26 rows are required to represent 25 bins), and 4 correspond to the number of variables used as environmental proxies. # Define Number of bins nb&lt;- 25 #quantile matrix (of the covariate data) q.mat&lt;- matrix(NA, nrow=(nb+1), ncol= nlyr(cov.dat)) j=1 for (i in 1:nlyr(cov.dat)){ #note the index start here #get a quantile matrix together of the covariates ran1 &lt;- minmax(cov.dat[[i]])[2] - minmax(cov.dat[[i]])[1] step1&lt;- ran1/nb q.mat[,j]&lt;- seq(minmax(cov.dat[[i]])[1], to = minmax(cov.dat[[i]])[2], by =step1) j&lt;- j+1} From this matrix, we compute the hypercube matrix of covariates in the whole covariate space. # Hypercube of &quot;objective&quot; distribution (P) - covariates cov.dat.df &lt;- as.data.frame(cov.dat) # convert SpatRaster to dataframe cov.mat&lt;- matrix(1, nrow=nb, ncol=ncol(q.mat)) for (i in 1:nrow(cov.dat.df)){ # the number of pixels cntj&lt;- 1 for (j in 1:ncol(cov.dat.df)){ #for each column dd&lt;- cov.dat.df[i,j] for (k in 1:nb){ #for each quantile kl&lt;- q.mat[k, cntj] ku&lt;- q.mat[k+1, cntj] if (is.na(dd)) { print(&#39;Missing&#39;) } else if (dd &gt;= kl &amp; dd &lt;= ku){cov.mat[k, cntj]&lt;- cov.mat[k, cntj] + 1} } cntj&lt;- cntj+1 } } We then calculate the hypercube matrix of covariates in the sample space. # Sample data hypercube h.mat&lt;- matrix(1, nrow=nb, ncol=ncol(q.mat)) for (ii in 1:nrow(p.dat_I)){ # the number of observations cntj&lt;- 1 for (jj in 2:ncol(p.dat_I)){ #for each column dd&lt;- p.dat_I[ii,jj] for (kk in 1:nb){ #for each bin kl&lt;- q.mat[kk, cntj] ku&lt;- q.mat[kk+1, cntj] if (dd &gt;= kl &amp; dd &lt;= ku){h.mat[kk, cntj]&lt;- h.mat[kk, cntj] + 1} } cntj&lt;- cntj+1 } } KL-divergence We calculate the KL-divergence to measure how much the distribution of covariates in tbe sample space (Q) deviates from the distribution of covariates in the complete study area space (P). ## Compare covariate distributions in P and Q with Kullback-Leibler (KL) divergence kl.index &lt;-c() for(i in 1:ncol(cov.dat.df)){ kl &lt;- KL.empirical(c(cov.mat[,i]), c(h.mat[,i])) kl.index &lt;- c(kl.index,kl) klo &lt;- mean(kl.index) } print(kl.index) # KL divergences of each covariate ## [1] 0.04115895 0.04241792 0.02779852 0.04328375 print(klo) # KL divergence in the existing soil samples ## [1] 0.03866478 The KL-divergence is always greater than or equal to zero, and reaches its minimum value (zero) only when P and Q are identical. Thus, lower values of KL-divergence are indicative of a good match between both the sample and the study area spaces, indicating that the sample space is a fair representation of the environmental conditions in the study area. In this case, the KL-divergence value is 0.039, indicating that the legacy samples capture most of the environmental variability in the study area. Percent of representativeness in relation to the overall environmental conditions Finally, we can also determine the degree in which our legacy soil dataset is representative of the existing environmental conditions in the study area. For that, we calculate the proportion of pixels in the study area that would fall within the convex hull polygon delineated upon the environmental conditions found at the soil legacy data locations only. The convex hull polygon is created upon a Principal Component transformation of the covariate data in the soil legacy data and using the outter limits of the scores of the points projected on the two main Components. #### Representativeness of the Legacy Dataset: ---- ## Calculate the proportion of &quot;env. variables&quot; in the covariate spectra that fall within the convex hull of variables in the &quot;environmental sample space&quot; # Principal component of the legacy data sample pca.s = prcomp(p.dat_I[,2:(ncol(cov.dat.df)+1)],scale=TRUE, center=TRUE) scores_pca1 = as.data.frame(pca.s$x) # Plot the first 2 principal components and convex hull rand.tr &lt;- tri.mesh(scores_pca1[,1],scores_pca1[,2],&quot;remove&quot;) # Delaunay triangulation rand.ch&lt;-convex.hull(rand.tr, plot.it=F) # convex hull pr_poly = cbind(x=c(rand.ch$x),y=c(rand.ch$y)) # save the convex hull vertices plot(scores_pca1[,1], scores_pca1[,2], xlab=&quot;PCA 1&quot;, ylab=&quot;PCA 2&quot;, xlim=c(min(scores_pca1[,1:2]), max(scores_pca1[,1:2])),ylim=c(min(scores_pca1[,1:2]), max(scores_pca1[,1:2])), main=&#39;Convex hull of soil legacy data&#39;) lines(c(rand.ch$x,rand.ch$x[1]), c(rand.ch$y,rand.ch$y[1]),col=&quot;red&quot;,lwd=1) # draw the convex hull (domain of legacy data) # PCA projection of study area population onto the principal components PCA_projection&lt;- predict(pca.s, cov.dat.df) # Project study area population onto sample PC newScores = cbind(x=PCA_projection[,1],y=PCA_projection[,2]) # PC scores of projected population # Plot the polygon and all points to be checked plot(newScores, xlab=&quot;PCA 1&quot;, ylab=&quot;PCA 2&quot;, xlim=c(min(newScores[,1:2]), max(newScores[,1:2])), ylim=c(min(newScores[,1:2]), max(newScores[,1:2])), col=&#39;black&#39;, main=&#39;Environmental space plots over the convex hull of soil legacy data&#39;) polygon(pr_poly,col=&#39;#99999990&#39;) # Check which points fall within the polygon pip &lt;- point.in.polygon(newScores[,2], newScores[,1], pr_poly[,2],pr_poly[,1],mode.checked=FALSE) newScores &lt;- data.frame(cbind(newScores, pip)) # Plot points outside convex hull points(newScores[which(newScores$pip==0),1:2],pch=&#39;X&#39;, col=&#39;red&#39;) # Proportion of the conditions in the study area that fall within the convex hull sum(newScores$pip)/nrow(newScores)*100 ## [1] 96.50188 This indicates that 96.5% of the existing conditions in the study area fall within the convex hull delineated with the data in the soil samples, showing the adequacy of the proposed legacy data for DSM. References "],["creating-a-sampling-design.html", "Chapter 3 Creating a sampling design 3.1 Determining the optimal sample size", " Chapter 3 Creating a sampling design 3.1 Determining the optimal sample size Several strategies exist for designing soil sampling, including regular, random, and stratified sampling. Each strategy comes with its own set of advantages and limitations, which must be carefully considered before commencing a soil sampling campaign. Regular sampling, also called grid sampling, is straightforward and ensures uniform coverage, making it suitable for spatial analysis and detecting trends. However, it may introduce bias and miss small-scale variability. Generally, random sampling may require a larger number of samples to accurately capture soil variability compared to stratified sampling, which is more targeted. Nonetheless, from a statistical standpoint, random sampling is often preferred. It effectively minimizes selection bias by giving every part of the study area an equal chance of being selected. This approach yields a sample that is truly representative of the entire population, leading to more accurate, broadly applicable conclusions. Random sampling also supports valid statistical inferences, ensures reliability of results, and simplifies the estimation of errors, thereby facilitating a broad spectrum of statistical analyses. Crucially, the determination of both the number and locations of soil samples is a pivotal factor in the success of any sampling campaign. The chosen strategy directly influences the representativeness and accuracy of the soil data collected, which in turn impacts the quality of the conclusions drawn from the study. ## Load raster covariate data---- # Read Spatial data covariates as rasters with terra rasters &lt;- &quot;data/rasters&quot; cov.dat &lt;- list.files(rasters, pattern = &quot;tif$&quot;, recursive = TRUE, full.names = TRUE) cov.dat &lt;- terra::rast(cov.dat) plot(cov.dat) (#fig:plot_covdata_03)Plot of the covariates # Define empty vectors to store results number_of_samples &lt;- c() prop_explained &lt;- c() klo_samples &lt;-c() samples_storage &lt;- list() # Define the number of samples to be tested in a loop (from initial to final) and the step of the sequence initial.n &lt;- 10 final.n &lt;- 400 by.n &lt;- 5 for (dede in seq(initial.n, final.n, by=by.n)){ p.dat_I &lt;- spatSample(cov.dat,dede, na.rm=TRUE,xy=TRUE,method=&quot;random&quot;) p.dat_I_sp &lt;- p.dat_I coordinates(p.dat_I_sp)&lt;- ~ x + y # Store sampling scheme in list samples_storage[[paste0(&quot;N&quot;, dede)]] &lt;- p.dat_I_sp # Get covariate values for each point p.dat_I &lt;- p.dat_I[3:ncol(p.dat_I)] ## Comparison of population and sample distributions ---- # Kullback-Leibler (KL) divergence # Quantiles of the study area: Number of bins nb&lt;- 25 #quantile matrix (of the covariate data) q.mat&lt;- matrix(NA, nrow=(nb+1), ncol= nlyr(cov.dat)) j=1 for (i in 1:nlyr(cov.dat)){ #note the index start here #get a quantile matrix together of the covariates ran1 &lt;- minmax(cov.dat[[i]])[2] - minmax(cov.dat[[i]])[1] step1&lt;- ran1/nb q.mat[,j]&lt;- seq(minmax(cov.dat[[i]])[1], to = minmax(cov.dat[[i]])[2], by =step1) j&lt;- j+1} q.mat # Hypercube of covariates in study area cov.dat.df &lt;- as.data.frame(cov.dat) # convert SpatRaster to dataframe cov.mat&lt;- matrix(1, nrow=nb, ncol=ncol(q.mat)) for (i in 1:nrow(cov.dat.df)){ # the number of pixels cntj&lt;- 1 for (j in 1:ncol(cov.dat.df)){ #for each column dd&lt;- cov.dat.df[i,j] for (k in 1:nb){ #for each quantile kl&lt;- q.mat[k, cntj] ku&lt;- q.mat[k+1, cntj] if (is.na(dd)) { print(&#39;Missing&#39;) } else if (dd &gt;= kl &amp; dd &lt;= ku){cov.mat[k, cntj]&lt;- cov.mat[k, cntj] + 1} } cntj&lt;- cntj+1 } } cov.mat # Compare whole study area covariate space with the selected sample # Sample data hypercube (essentially the same script as for the grid data but just doing it on the sample data) h.mat&lt;- matrix(1, nrow=nb, ncol=ncol(q.mat)) for (ii in 1:nrow(p.dat_I)){ # the number of observations cntj&lt;- 1 for (jj in 1:ncol(p.dat_I)){ #for each column dd&lt;- p.dat_I[ii,jj] for (kk in 1:nb){ #for each quantile kl&lt;- q.mat[kk, cntj] ku&lt;- q.mat[kk+1, cntj] if (dd &gt;= kl &amp; dd &lt;= ku){h.mat[kk, cntj]&lt;- h.mat[kk, cntj] + 1} } cntj&lt;- cntj+1 } } h.mat ## Compute Kullback-Leibler (KL) divergence kl.index &lt;-c() for(i in 1:ncol(cov.dat.df)){ kl &lt;- KL.empirical(c(cov.mat[,i]), c(h.mat[,i])) kl.index &lt;- c(kl.index,kl) klo &lt;- mean(kl.index) } #### Representativeness of the Legacy Dataset: ---- ## Calculate the proportion of &quot;env. variables&quot; in the covariate spectra that fall within the convex hull of variables in the &quot;environmental sample space&quot; # Principal component of the legacy data sample pca.s = prcomp(p.dat_I,scale=TRUE, center=TRUE) scores_pca1 = as.data.frame(pca.s$x) # Plot the first 2 principal components and convex hull rand.tr &lt;- tri.mesh(scores_pca1[,1],scores_pca1[,2],&quot;remove&quot;) # Delaunay triangulation rand.ch&lt;-convex.hull(rand.tr, plot.it=F) # convex hull pr_poly = cbind(x=c(rand.ch$x),y=c(rand.ch$y)) # save the convex hull vertices # plot(scores_pca1[,1], scores_pca1[,2], xlab=&quot;PCA 1&quot;, ylab=&quot;PCA 2&quot;, xlim=c(min(scores_pca1[,1:2]), max(scores_pca1[,1:2])),ylim=c(min(scores_pca1[,1:2]), max(scores_pca1[,1:2])), main=&#39;Convex hull of soil legacy data&#39;) # lines(c(rand.ch$x,rand.ch$x[1]), c(rand.ch$y,rand.ch$y[1]),col=&quot;red&quot;,lwd=1) # draw the convex hull (domain of legacy data) # PCA projection of study area population onto the principal components PCA_projection&lt;- predict(pca.s, cov.dat.df) # Project study area population onto sample PC newScores = cbind(x=PCA_projection[,1],y=PCA_projection[,2]) # PC scores of projected population # Check which points fall within the polygon pip &lt;- point.in.polygon(newScores[,2], newScores[,1], pr_poly[,2],pr_poly[,1],mode.checked=FALSE) newScores &lt;- data.frame(cbind(newScores, pip)) # Plot the polygon and all points to be checked # if(dede == final.n){ # plot(newScores, xlab=&quot;PCA 1&quot;, ylab=&quot;PCA 2&quot;, xlim=c(min(newScores[,1:2]), max(newScores[,1:2])), ylim=c(min(newScores[,1:2]), max(newScores[,1:2])), col=&#39;black&#39;, main=&#39;Environmental space plots over the convex hull of soil legacy data&#39;) # polygon(pr_poly,col=&#39;#99999990&#39;) # # Plot points outside convex hull # points(newScores[which(newScores$pip==0),1:2],pch=&#39;X&#39;, col=&#39;red&#39;) # } # Proportion of the conditions in the study area that fall within the convex hull #sum(newScores$pip)/nrow(newScores)*100 klo_samples &lt;- c(klo_samples,klo) prop_explained &lt;- c(prop_explained,sum(newScores$pip)/nrow(newScores)*100) number_of_samples &lt;- c(number_of_samples,dede) # print(paste(&quot;N samples = &quot;,dede, &quot; out of &quot;,final.n, &quot; ;KL = &quot;, klo, &quot;;Proportion = &quot;, sum(newScores$pip)/nrow(newScores)*100 )) } # Plot the polygon and all points to be checked plot(newScores[,1:2], xlab=&quot;PCA 1&quot;, ylab=&quot;PCA 2&quot;, xlim=c(min(newScores[,1:2]), max(newScores[,1:2])), ylim=c(min(newScores[,1:2]), max(newScores[,1:2])), col=&#39;black&#39;, main=&#39;Environmental space plots over the convex hull of soil legacy data&#39;) polygon(pr_poly,col=&#39;#99999990&#39;) # # Plot points outside convex hull points(newScores[which(newScores$pip==0),1:2], col=&#39;red&#39;, pch=12, cex =1) (#fig:compute_n_optimal_03)Distribution of covariates in the sample space Figure @ref(fig:chunk-compute_n_optimal_03) shows the distribution of covariates in the sample space. # Merge data from number of samples, KL Divercence and % representativeness results &lt;- data.frame(number_of_samples,klo_samples,prop_explained) names(results)&lt;-c(&quot;N&quot;,&quot;KL&quot;,&quot;Perc&quot;) # Determine the minimum sample size to accounf for 95% of representativeness of the covariate diversity optimal_n &lt;- results %&gt;% filter(Perc &gt;=95) %&gt;% filter(KL ==min(KL) | N == min(N) | Perc ==min(Perc) ) %&gt;% filter(N == min(N)) optimal_n ## N KL Perc ## 1 125 0.09369913 95.4094 N_final &lt;- samples_storage[paste0(&quot;N&quot;,optimal_n$N)][[1]] plot(cov.dat[[1]]) points(N_final) (#fig:fig:tag-for-figure)Covariates and distribution of samples plot_ly(results, x = ~N, y = ~KL, mode = &quot;lines+markers&quot;, type = &quot;scatter&quot;, name = &quot;KL divergence&quot;) %&gt;% add_trace(x = ~N, y = ~Perc, mode = &quot;lines+markers&quot;, type = &quot;scatter&quot;, yaxis = &quot;y2&quot;, name = &quot;% Representativeness&quot;) %&gt;% add_trace(x = ~optimal_n$N, y = ~optimal_n$Perc, yaxis = &quot;y2&quot;, mode = &quot;markers&quot;, name = &quot;Optimal N&quot;, marker = list(size = 8, color = &#39;#d62728&#39;,line = list(color = &#39;black&#39;, width = 1))) %&gt;% layout(xaxis = list(title = &quot;N&quot;, showgrid = T, dtick = 50, tickfont = list(size = 11)), yaxis = list(title = &quot;KL divergence&quot;, showgrid = F ), yaxis2 = list(title = &quot;Representativeness (%)&quot;, overlaying = &quot;y&quot;, side = &quot;right&quot;), legend = list(orientation = &quot;h&quot;, y = 1.2, x = 0.1, traceorder = &quot;normal&quot;), margin = list(t = 50, b = 50, r = 100, l = 80), hovermode = &#39;x&#39;) %&gt;% config(displayModeBar = FALSE) (#fig:fig:plot_KLfunction_03)KL Divergence and Proportion of Representativeness as function of sample size "],["stratified-random-sampling-design.html", "Chapter 4 Stratified Random Sampling Design 4.1 General Procedure 4.2 Stratified random sampling for large areas", " Chapter 4 Stratified Random Sampling Design Stratified random sampling is a technique where the study area is divided into different groups or strata based on certain environmental traits, and a number of random samples are taken from within each group. One of the primary advantages of stratified sampling is its ability to capture the diversity within a population by making sure each group is represented. It can provide a more accurate reflection of the entire population compared to random sampling, especially when the groups are distinct and have unique qualities. This approach is particularly beneficial when certain subgroups within the population are specifically noteworthy. It also allows for more precise estimates with a smaller total sample size compared to simple random choice. Stratified sampling presents some disadvantages. Achieving effective categories requires a proper definition and delineation of the initial information to create the strata. The classification of the environmental information into categories and ensuring fair portrayal of each can be intricate and time-taking, and mislabeling elements into an improper group can lead to skewed outcomes. 4.1 General Procedure The creation of a stratified random sampling design involves the identification of relevant features describing the environmental diversity in the area (soil and land use are the environmental variables generally used to define strata), delineation of the strata, determination of the number of samples to distribute to each stratum, followed by random sampling within it. By identifying relevant classes, combining them to define strata, and allocating an appropriate number of samples to each stratum, a representative sample can be obtained. Random sampling within each stratum helps to ensure that the sample is unbiased and provides a fair representation of the overall conditions in the area. The first question is about how many samples must be retrieved from each strata. The sampling scheme starts with the definition of the total number of samples to collect. In this case, the determination of the sample size is a complex and highly variable process based, among others, on the specific goals of the study, the variability of environmental proxies, the statistical requirements for accuracy and confidence, as well as additional considerations such as accessibility, costs and available resources. The optimal number of samples can be determined following the method proposed in Chapter 2 of this manual. The number of samples within each stratum is calculated using an area-weighted approach taking into account the relative area of each stratum. The sampling design in this section must also comply with the following requirements: All sampling strata must have a minimum size of 100 hectares. All sampling strata must be represented by at least 2 samples. This sampling process ensures the representativeness of the environmental combinations present across the area while maintaining an efficient and feasible field sampling campaign. 4.1.1 Strata creation We must determine the kind of information that will be used to construct the strata. In this manual, we present a simple procedure to build strata based on data from two environmental layers: soil groups and land use classification data. The information should be provided in the form of vector shapefiles with associated information databases. The data on both sets often comprises a large number of categories, that would lead to a very large number of strata. Thus, it is desirable to make an effort of aggregating similar categories within each input data set, to reduce, as much as possible, the number of categories while still capturing the most of the valuable variability in the area. The fist step is to set-up the RStudio environment and load the required packages: We must define the number of samples to distribute in the sampling design, and the soil and land use information layers to build the strata. We also define a REPLACEMENT parameter to account for a reduction of the sampling area according to a certain area using predefined bounding-box, that can be also here defined. We proceed with the calculation of soil groups. In this example, soil information is stored in the field TYPES. We have analysed the extent to which the information in this field can be synthesized to eliminate redundancy when creating the strata. 1 # Plot final map with the aggregated soil information #mapview(soil[&quot;USDA_CLASS&quot;], alpha=0, homebutton=T) A similar procedure is performed on the land use dataset. # Plot final map with the aggregated land use information #mapview(lc[&quot;LU&quot;], alpha=0, homebutton=T) To create the soil-land use strata we must combine both classified datasets. # Combine soil and land use layers soil_lc &lt;- st_intersection(soil, lc) ## Warning: attribute variables are assumed to be spatially constant throughout all ## geometries soil_lc$soil_lc &lt;- paste0(soil_lc$USDA_CLASS, &quot;_&quot;, soil_lc$LU) soil_lc &lt;- soil_lc %&gt;% dplyr::select(soil_lc, geometry) Finally, to comply with the initial requirements of the sampling design, we calculate the areas of each polygon, delete all features with extent lesser than 100 has. The final strata map is shown in Figure XX. # Plot final map of stratum #mapview(soil_lc[&quot;soil_lc&quot;], alpha=0, homebutton=T) terra::plot(soil_lc[&quot;soil_lc&quot;], border=NA, main=&quot;Strata classes&quot;) Figure 4.1: Plot of strata 4.1.2 Stratified random sampling soil_lc &lt;- st_read(&quot;../soil_sampling/JAM/strata_diss.shp&quot;) ## Reading layer `strata_diss&#39; from data source ## `/Users/luislado/Dropbox/Github/soil_sampling/JAM/strata_diss.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 35 features and 3 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 605462.5 ymin: 617449.8 xmax: 836425 ymax: 708262.5 ## Projected CRS: JAD2001 / Jamaica Metric Grid soil_lc &lt;- st_cast(soil_lc, &#39;POLYGON&#39;) target &lt;- st_read(&quot;../soil_sampling/JAM/sampling_points.shp&quot;) ## Reading layer `sampling_points&#39; from data source ## `/Users/luislado/Dropbox/Github/soil_sampling/JAM/sampling_points.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 694 features and 7 fields ## Geometry type: POINT ## Dimension: XY ## Bounding box: xmin: 608116.9 ymin: 619733 xmax: 834024.8 ymax: 707244.9 ## Projected CRS: JAD2001 / Jamaica Metric Grid target &lt;- target[target$type==&quot;Target&quot;,] # Plot final map with the aggregated land use information #mapview(soil_lc[&quot;soil_lc&quot;], alpha=0, homebutton=T) + mapview(z[z$type==&quot;Target&quot;,], color = &quot;white&quot;, col.regions = &quot;tomato&quot;) terra::plot(soil_lc[&quot;soil_lc&quot;], border=NA, main=&quot;Strata classes&quot;) terra::points(target[target$type==&quot;Target&quot;,]) (#fig:fig:sampling-plot)Plot of strata and sampling points 4.2 Stratified random sampling for large areas The implementation of a stratified random sampling, along with target and replacement points, can present operating difficulties when dealing with areas of significant size and with locations that are hard to reach. To address this issue, the sampling approach can be modified by excluding areas with limited accessibility. This modification can streamline fieldwork operations and establish a feasible sampling method while still retaining the essence of the stratified random sampling framework. By excluding areas with limited accessibility, the sampling design can be adjusted to ensure a more practical and effective approach to data collection. Delineation of sampling accessibility: The sampling area can be further limited based on accessibility considerations. Areas with very limited accessibility, defined as regions located more than 1 kilometre away from a main road or access path, may be excluded from sampling areas. To accomplish this, a map of main roads and paths can be used to establish a sampling buffer that includes areas within a 1-kilometre buffer around the road infrastructures. This exclusion helps to eliminate the most remote and challenging-to-access areas. An additional layer of accessibility information can be incorporated based on population distribution in the country, considering that, if population is present, there is a high change that points in the surroundings can be accessible for sampling. In this case, populated nuclei are vectorized into points, and a 250-meter buffer is then generated around each point. These resulting areas can be then added to the 1-kilometre buffer around the roads, which collectively defined the final sampling area. Substitution of replacement points with replacement areas in close proximity to the target points: The sampling design presented before included designated replacement points to serve as substitutes for each target point in the case that it would be inaccessible during fieldwork. However, this approach presented challenges, particularly for large areas, as the replacement point could be located far from the target point, resulting in significant logistical efforts. This limitation posed a risk of delays in completing the sampling campaign within the allocated time frame. To address this challenge, an alternative strategy is to replace the idea of replacement points with replacement areas situated in the immediate vicinity of the target point. The replacement area for each target point is now confined within a 500-meter buffer surrounding the target and falls within the same sampling stratum. This approach concentrates sampling and replacement activities within a specific geographic area, streamlining the overall process. By reducing the need for extensive travel, this method enhances efficiency and facilitates sample collection. Figure 2 illustrates the distribution of sampling points and replacement areas for visualization. Additional area exclusion: Some areas can be identified as not suitable for sampling purposes. This is the case of certain natural protected areas, conflict regions presenting risks for field operators, etc. These areas must be identified masked at an initial stage of the design to exclude them from the sampling strata. The procedure is the same as that previously presented, with the difference that buffers and exclusion areas must be masked-out from the strata map before performing the random-sampling. # Compute sampling areas WITH REPLACEMENT ----- if(REPLACEMENT){ # Load strata soil_lc &lt;- st_read(&quot;../soil_sampling/JAM/strata.shp&quot;) # Read sampling. points from previous step z &lt;- st_read(&quot;../soil_sampling/JAM/sampling_points.shp&quot;) # Define buffer of 500 meters (coordinate system must be in metric base) samples.buffer = 500 buf.samples &lt;- st_buffer(z, dist=samples.buffer) # Intersect buffers samples_buffer = st_intersection(soil_lc, buf.samples) samples_buffer &lt;- samples_buffer[samples_buffer$type==&quot;Target&quot;,] samples_buffer &lt;- samples_buffer[samples_buffer$soil_lc==samples_buffer$group,] # Save Sampling areas st_write(samples_buffer, paste0(&#39;../soil_sampling/JAM/replacement_areas_&#39;, samples.buffer, &#39;.shp&#39;), delete_dsn = TRUE) # Write target points only targets &lt;- z[z$type==&quot;Target&quot;,] st_write(targets, &#39;../soil_sampling/JAM/sampling_points_TAR.shp&#39;, delete_dsn = TRUE) } This exploratory work is a prerequisite and must be adapted specifically to each soil and land use dataset↩︎ "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
